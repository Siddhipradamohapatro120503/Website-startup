---
- name: Deploy Application
  hosts: production
  become: yes
  vars:
    app_dir: /opt/startup-app
    docker_compose_file: "{{ app_dir }}/docker-compose.prod.yml"
    env_file: "{{ app_dir }}/.env"
    domain_name: "{{ domain }}"
    email: "{{ certbot_email }}"
    razorpay_key_id: "{{ vault_razorpay_key_id }}"
    razorpay_key_secret: "{{ vault_razorpay_key_secret }}"
    mongo_user: "{{ mongo_user }}"
    mongo_password: "{{ mongo_password }}"
    mongo_port: 27017
    mongodb_uri: "mongodb://{{ mongo_user }}:{{ mongo_password }}@localhost:{{ mongo_port }}/startup_db"

  tasks:
    - name: Install required system packages
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - python3-pip
        - virtualenv
        - python3-setuptools

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: present
        update_cache: yes

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Install Docker Compose plugin
      shell: |
        DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
        mkdir -p $DOCKER_CONFIG/cli-plugins
        curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
        chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
      args:
        creates: /root/.docker/cli-plugins/docker-compose

    - name: Install Docker SDK for Python
      apt:
        name: python3-docker
        state: present
        update_cache: yes

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'

    - name: Create nginx configuration directory
      file:
        path: "{{ app_dir }}/nginx"
        state: directory
        mode: '0755'

    - name: Create letsencrypt directory
      file:
        path: "{{ app_dir }}/certbot"
        state: directory
        mode: '0755'

    - name: Copy nginx configuration
      template:
        src: templates/nginx.conf.j2
        dest: "{{ app_dir }}/nginx/nginx.conf"
        mode: '0644'

    - name: Copy docker-compose file
      template:
        src: templates/docker-compose.prod.yml.j2
        dest: "{{ docker_compose_file }}"
        mode: '0644'

    - name: Stop existing services
      community.docker.docker_compose_v2:
        project_src: "{{ app_dir }}"
        files:
          - "docker-compose.prod.yml"
        state: absent
      ignore_errors: yes

    - name: Copy environment file
      template:
        src: templates/.env.j2
        dest: "{{ env_file }}"
        mode: '0644'

    - name: Log into DockerHub
      docker_login:
        username: "{{ dockerhub_username }}"
        password: "{{ dockerhub_token }}"

    - name: Pull latest images
      community.docker.docker_compose_v2:
        project_src: "{{ app_dir }}"
        files:
          - "docker-compose.prod.yml"
        pull: "always"
        state: present
        services:
          - frontend
          - backend
          - mongodb
      ignore_errors: yes

    - name: Ensure Docker network exists
      docker_network:
        name: app-network
        state: present
      ignore_errors: yes

    - name: Create Docker volumes
      docker_volume:
        name: "{{ item }}"
        state: present
      with_items:
        - "mongodb_data"
      ignore_errors: yes

    - name: Start services
      community.docker.docker_compose_v2:
        project_src: "{{ app_dir }}"
        files:
          - "docker-compose.prod.yml"
        state: present
        build: no
      register: compose_result
      ignore_errors: yes

    - name: Debug compose result
      debug:
        var: compose_result
      when: compose_result is defined

    - name: Wait for services to be healthy
      wait_for:
        timeout: 30
      when: compose_result is success

    - name: Wait for nginx to start
      wait_for:
        port: 80
        timeout: 60

    - name: Check if certificate exists
      stat:
        path: "/etc/letsencrypt/live/{{ domain_name }}/fullchain.pem"
      register: cert_exists

    - name: Stop nginx temporarily
      community.docker.docker_compose_v2:
        project_src: "{{ app_dir }}"
        files:
          - "docker-compose.prod.yml"
        services: ["frontend"]
        state: stopped
      when: not cert_exists.stat.exists

    - name: Get SSL certificate
      command: >
        certbot certonly --standalone
        -d {{ domain_name }}
        --email {{ email }}
        --agree-tos
        --non-interactive
        --preferred-challenges http
      when: not cert_exists.stat.exists

    - name: Create certbot renewal cron job
      cron:
        name: "Certbot Renewal"
        minute: "0"
        hour: "0"
        day: "1"
        job: "docker compose -f {{ docker_compose_file }} down && certbot renew --quiet && docker compose -f {{ docker_compose_file }} up -d"

    - name: Restart services with SSL
      community.docker.docker_compose_v2:
        project_src: "{{ app_dir }}"
        files:
          - "docker-compose.prod.yml"
        state: present
        restarted: yes

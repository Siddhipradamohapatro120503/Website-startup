---
- name: Deploy Application
  hosts: production
  become: yes
  vars:
    app_dir: /opt/startup-app
    docker_compose_file: "{{ app_dir }}/docker-compose.prod.yml"
    domain_name: "{{ domain }}"
    email: "{{ certbot_email }}"
    # Database configuration
    mongo_user: "{{ mongo_user }}"
    mongo_password: "{{ mongo_password }}"
    mongo_port: 27017
    mongodb_uri: "mongodb://{{ mongo_user }}:{{ mongo_password }}@mongodb:27017/startup_db?authSource=admin"
    # Payment configuration
    razorpay_key_id: "{{ vault_razorpay_key_id }}"
    razorpay_key_secret: "{{ vault_razorpay_key_secret }}"
    # Docker configuration
    dockerhub_username: "{{ dockerhub_username }}"

  pre_tasks:
    - name: Verify all required variables are defined
      assert:
        that:
          - domain is defined
          - certbot_email is defined
          - mongo_user is defined
          - mongo_password is defined
          - vault_razorpay_key_id is defined
          - vault_razorpay_key_secret is defined
          - dockerhub_username is defined
        fail_msg: "Missing required variables. Please ensure all variables are defined in your inventory or vars file."

  tasks:
    - name: Install dependencies
      apt:
        name: 
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - python3-docker
          - lsof
        state: present
        update_cache: yes

    - name: Install Docker
      block:
        - name: Add Docker GPG key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present

        - name: Add Docker repository
          apt_repository:
            repo: deb https://download.docker.com/linux/ubuntu focal stable
            state: present

        - name: Install Docker CE
          apt:
            name: docker-ce
            state: present
            update_cache: yes

        - name: Start Docker service
          systemd:
            name: docker
            state: started
            enabled: yes

    - name: Install Docker Compose
      shell: |
        DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
        mkdir -p $DOCKER_CONFIG/cli-plugins
        curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
        chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
      args:
        creates: /root/.docker/cli-plugins/docker-compose

    - name: Setup application
      block:
        - name: Create required directories
          file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
          loop:
            - "{{ app_dir }}"
            - "{{ app_dir }}/nginx"
            - "{{ app_dir }}/certbot"

        - name: Copy configuration files
          template:
            src: "templates/{{ item.src }}"
            dest: "{{ app_dir }}/{{ item.dest }}"
            mode: '0644'
          loop:
            - { src: 'nginx.conf.j2', dest: 'nginx/nginx.conf' }
            - { src: 'docker-compose.prod.yml.j2', dest: 'docker-compose.prod.yml' }
            - { src: '.env.j2', dest: '.env' }

    - name: Clean up existing deployment
      block:
        - name: Stop running containers
          shell: docker stop $(docker ps -q)
          ignore_errors: yes

        - name: Remove containers
          shell: docker rm -f $(docker ps -aq)
          ignore_errors: yes

        - name: Kill process on port 80
          shell: lsof -ti:80 | xargs kill -9
          ignore_errors: yes

    - name: Deploy application
      block:
        - name: Create Docker network
          docker_network:
            name: app-network
            state: present

        - name: Create Docker volumes
          docker_volume:
            name: mongodb_data
            state: present

        - name: Pull latest images
          community.docker.docker_compose_v2:
            project_src: "{{ app_dir }}"
            files: ["docker-compose.prod.yml"]
            pull: "always"
            state: present
          register: pull_result
          retries: 3
          delay: 10
          until: pull_result is not failed

        - name: Start MongoDB
          community.docker.docker_compose_v2:
            project_src: "{{ app_dir }}"
            files: ["docker-compose.prod.yml"]
            services: ["mongodb"]
            state: present
          register: mongodb_start
          retries: 3
          delay: 10
          until: mongodb_start is not failed

        - name: Wait for MongoDB to be healthy
          shell: >
            docker inspect $(docker ps -q --filter name=mongodb) --format='{{.State.Health.Status}}'
          register: mongodb_health
          until: mongodb_health.stdout == "healthy"
          retries: 30
          delay: 10
          ignore_errors: yes

        - name: Start backend service
          community.docker.docker_compose_v2:
            project_src: "{{ app_dir }}"
            files: ["docker-compose.prod.yml"]
            services: ["backend"]
            state: present
          register: backend_start
          retries: 3
          delay: 10
          until: backend_start is not failed
          when: mongodb_health.stdout == "healthy"

        - name: Wait for backend to be healthy
          shell: >
            docker inspect $(docker ps -q --filter name=backend) --format='{{.State.Health.Status}}'
          register: backend_health
          until: backend_health.stdout == "healthy"
          retries: 30
          delay: 10
          ignore_errors: yes

        - name: Start frontend service
          community.docker.docker_compose_v2:
            project_src: "{{ app_dir }}"
            files: ["docker-compose.prod.yml"]
            services: ["frontend"]
            state: present
          register: frontend_start
          retries: 3
          delay: 10
          until: frontend_start is not failed
          when: backend_health.stdout == "healthy"

        - name: Wait for frontend to be healthy
          shell: >
            docker inspect $(docker ps -q --filter name=frontend) --format='{{.State.Health.Status}}'
          register: frontend_health
          until: frontend_health.stdout == "healthy"
          retries: 30
          delay: 10
          ignore_errors: yes

    - name: Setup SSL
      block:
        - name: Check for existing certificate
          stat:
            path: "/etc/letsencrypt/live/{{ domain_name }}/fullchain.pem"
          register: cert_file

        - name: Get SSL certificate
          shell: >
            certbot certonly --webroot 
            -w /var/www/certbot 
            -d {{ domain_name }}
            --email {{ email }}
            --agree-tos
            --non-interactive
          when: not cert_file.stat.exists
          ignore_errors: yes

        - name: Setup certificate renewal
          cron:
            name: "Certbot Renewal"
            special_time: daily
            job: "certbot renew --quiet --deploy-hook 'docker compose -f {{ docker_compose_file }} restart frontend'"

name: CI-CD Pipeline for MERN App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install backend dependencies
      run: npm install
      
    - name: Install frontend dependencies
      run: |
        cd client
        npm install

    - name: Run tests
      run: npm test

    - name: Build frontend
      run: |
        cd client
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: ./client/build
        retention-days: 5

    - name: Deploy to local server
      uses: appleboy/ssh-action@v0.1.2
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Update system
          sudo apt-get update
          sudo apt-get install -y gnupg curl

          # Install MongoDB
          if [ ! -x "$(command -v mongod)" ]; then
            curl -fsSL https://pgp.mongodb.com/server-6.0.asc | \
              sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg \
              --dearmor
            
            echo "deb [ signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg] http://repo.mongodb.org/apt/debian bullseye/mongodb-org/6.0 main" | \
              sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
            
            sudo apt-get update
            sudo apt-get install -y mongodb-org
            
            # Create MongoDB data directory
            sudo mkdir -p /data/db
            sudo chown -R mongodb:mongodb /data/db
            
            # Start MongoDB
            sudo systemctl start mongod
            sudo systemctl enable mongod
            
            # Create MongoDB admin user
            mongo admin --eval '
              db.createUser({
                user: "${{ secrets.MONGO_ADMIN_USERNAME }}",
                pwd: "${{ secrets.MONGO_ADMIN_PASSWORD }}",
                roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
              })
            '
            
            # Create application database and user
            mongo admin -u "${{ secrets.MONGO_ADMIN_USERNAME }}" -p "${{ secrets.MONGO_ADMIN_PASSWORD }}" --eval '
              use ${{ secrets.MONGO_DB_NAME }};
              db.createUser({
                user: "${{ secrets.MONGO_APP_USERNAME }}",
                pwd: "${{ secrets.MONGO_APP_PASSWORD }}",
                roles: [ { role: "readWrite", db: "${{ secrets.MONGO_DB_NAME }}" } ]
              })
            '
            
            # Enable MongoDB authentication
            sudo tee /etc/mongod.conf << EOF
            security:
              authorization: enabled
            
            net:
              bindIp: 127.0.0.1
              port: 27017
            
            storage:
              dbPath: /data/db
            EOF
            
            # Restart MongoDB with new configuration
            sudo systemctl restart mongod
          fi

          # Setup backup directory
          sudo mkdir -p /backup/mongodb
          sudo chown -R ${{ secrets.SERVER_USERNAME }}:${{ secrets.SERVER_USERNAME }} /backup/mongodb

          # Setup daily MongoDB backup cron job
          (crontab -l 2>/dev/null; echo "0 0 * * * mongodump --uri='mongodb://${{ secrets.MONGO_APP_USERNAME }}:${{ secrets.MONGO_APP_PASSWORD }}@localhost:27017/${{ secrets.MONGO_DB_NAME }}' --out=/backup/mongodb/backup_\$(date +\%Y\%m\%d_\%H\%M\%S) && find /backup/mongodb -type d -mtime +7 -exec rm -rf {} +") | crontab -

          # Create production env file
          cat > /path/to/your/app/.env << EOF
          MONGODB_URI=mongodb://${{ secrets.MONGO_APP_USERNAME }}:${{ secrets.MONGO_APP_PASSWORD }}@localhost:27017/${{ secrets.MONGO_DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          NODE_ENV=production
          PORT=5000
          EOF

          # Update system and install Certbot if not present
          sudo apt-get install -y certbot python3-certbot-nginx nginx

          # Navigate to app directory
          cd /path/to/your/app
          
          # Pull latest changes and install dependencies
          git pull origin main
          npm install
          npm run build --prefix client

          # Configure Nginx
          sudo tee /etc/nginx/sites-available/mern-app << 'EOF'
          server {
              listen 80;
              server_name ${{ secrets.DOMAIN_NAME }};
              
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }

              location /api {
                  proxy_pass http://localhost:5000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          EOF

          # Enable the site
          sudo ln -sf /etc/nginx/sites-available/mern-app /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl restart nginx

          # Setup SSL with Certbot
          if [ ! -f /etc/letsencrypt/live/${{ secrets.DOMAIN_NAME }}/fullchain.pem ]; then
            sudo certbot --nginx -d ${{ secrets.DOMAIN_NAME }} --non-interactive --agree-tos -m ${{ secrets.SSL_EMAIL }}
          fi

          # Restart the application
          pm2 restart all
